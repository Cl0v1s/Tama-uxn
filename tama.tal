( Stats: https://www.tamatalk.com/threads/tama-behaviour-schedule-v5.181751/ )
( Chr: http://make.vg/brewtool/chr/index.html )
( Base64 to hex: https://cryptii.com/pipes/base64-to-hex )
( ressource pack: https://piiixl.itch.io/1-bit-in-motion )

|00 @System  [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|20 @Screen  [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|c0 @DateTime &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( MACROS )

( sub-routine-address -- )
%CALL {
    JSR2
}

( -- )
( return-address -- (rst) )
%RET {
    JMP2r
}

( sub with carry )
( a b -- a-b c )
%SUBC {
    SWP DUP ROT SUB
    SWP GTHk SWP POP
}

( sub2 with carry )
( a b -- a-b c )
%SUBC2 {
    SWP2 DUP2 ROT2 SUB2
    SWP2 GTHk2 SWP2 POP2
}

%TIME {
    #00 .DateTime/minute DEI .epoch/min LDZ SUBC
    #00 SWP .DateTime/hour DEI .epoch/hour LDZ ROT ADD SUBC
    #00 SWP .DateTime/day DEI .epoch/day LDZ ROT ADD SUB
    #05a0 MUL2 SWP2 #003c MUL2 ADD2 ADD2 
}

( sprite-setting sprite-addr x y -- sprite-setting )
%DRAW_TILE {
    .Screen/y DEO2
    .Screen/x DEO2
    .Screen/addr DEO2
    .Screen/sprite DEOk 
    POP
}

%TAMA_EGG { #00 }
%TAMA_BABY { #01 }
%TAMA_DEAD { #ff }

( Structs )

|0000
    @frame-counter $1
    ( contains the adress of the currently selected UI slot )
    @cursor $2
    ( contains address of the currently played scene )
    @scene 
        &update $2
        &input-a $2
        &input-left $2
        &input-right $2
    ( dd hh mm, we only keep low nibble for year )
    @epoch 
        &day $1
        &hour $1
        &min $1
    ( tama stats )
    @Tama 
        &frame $2
        &x $2
        &y $2
        &state $1
        &happy $1
        &hunger $1
        &strain $1
        &poop $1
    ( timing events 3 max, timestamp* callback* )
    @events $1 $c
    ( objects on scene 3 max, update_callback* data* )
    @entities $1 $c

|0100
    #0040 .Screen/width DEO2
    #0040 .Screen/height DEO2

    #31ef .System/r DEO2
    #72af .System/g DEO2
    #b57c .System/b DEO2


    ;prng-init CALL

    ;load-game CALL

    ;on-screen .Screen/vector DEO2
    ;on-controller .Controller/vector DEO2
BRK


( Methods )

( MISC )

( add two bytes capped by max value )
( max a b -- a+B )
@add-max 
    ( max a b -- max a+b )
    ADD 
    ( max a+b -- max a+b )
    LTHk ,&cap JCN 
    ( max a+b -- a+b )
        NIP
        RET 
    &cap 
        POP 
RET

@prng-init ( -- )
	( seed )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour DEI #04 SFT2
	#00 .DateTime/day DEI #10 SFT2 EOR2
	#00 .DateTime/month DEI #60 SFT2 EOR2
		.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2
JMP2r

@prng ( -- number* )
	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP
JMP2r


@phex ( short* -- )
	SWP phex/b
	&b ( -- )
		DUP #04 SFT phex/c
	&c ( -- )
		#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
		JMP2r

@print-stats 
    LIT2 "ah .Console/write DEO .Console/write DEO
    #00 .Tama/happy LDZ ;phex CALL #0a .Console/write DEO
    LIT2 "uh .Console/write DEO .Console/write DEO
    #00 .Tama/hunger LDZ ;phex CALL #0a .Console/write DEO
    LIT2 "ts .Console/write DEO .Console/write DEO
    #00 .Tama/strain LDZ ;phex CALL #0a .Console/write DEO
    LIT2 "op .Console/write DEO .Console/write DEO
    #00 .Tama/poop LDZ ;phex CALL #0a .Console/write DEO
    #0a .Console/write DEO
RET 

( create a new list, a list can only contains up to 16 items )
( list-size list-addr -- )
@list-create 
    SWP
    ( low nibble for current size, high nibble for max size )
    #40 SFT 
    #f0 AND 
    SWP 
    STZ
RET

( item list-addr -- )
@list-push
    ( item list-addr -- item list-addr [list-addr] [list-addr] )
    DUP LDZ DUP 
    ( item list-addr [list-addr] [list-addr] -- item list-addr [list-addr] [list-addr>>4] )
    #04 SFT
    ( item list-addr [list-addr] [list-addr>>4] -- item list-addr [list-addr>>4] [list-addr] )
    SWP 
    #0f AND
    GTH ,&after-check JCN 
    ( if max-size<=current-size )
        POP2
        RET 
    &after-check
        ( item list-addr -- item list-addr list-addr list-addr )
        DUP DUP
        LDZ INC SWP STZ DUP LDZ #0f AND ADD STZ
    RET

( index list-addr -- )
@list-delete 
    ( remove 1 to list length: index list-addr -- list-length index list-addr )
    DUP DUP LDZ DUP #01 SUB ROT STZ
    ( index list-addr list-size )
    #04 SFT
    SWP INC SWP 
    ROT 
    &loop
    ( list-addr+1 list-size index -- list-addr+1 list-size index )
    DUP2 EQU ,&end JCN
        ROT DUP2 ADD
        DUP INC LDZ
        SWP 
        STZ
        ( x -- list-addr+1 list-size index+1 )
        ROT ROT INC 
        ,&loop JMP
    &end 
    POP2 
    POP
RET

( list-addr -- first-item )
@list-shift
    ( list-addr -- list-addr list-addr list-addr )
    DUP DUP 
    ( list-addr list-addr list-addr -- list-addr value list-addr list-addr  )
    DUP INC LDZ ROT ROT
    ( list-addr value list-addr list-addr -- list-addr value list-addr list-length )
    LDZ #0f AND
    ( list-addr value list-addr list-length -- list-addr value list-addr list-length )
    &loop 
    DUP #00 EQU ,&end JCN
    ( list-addr value list-addr list-length -- list-addr value list-addr list-length - 1 )
    #01 SUB 
    ( list-addr value list-addr list-length - 1 -- list-addr value list-length - 1 current-cell current-cell current-cell + 1 )
    SWP INC DUP DUP INC 
    ( list-addr value list-length - 1 current-cell current-cell current-cell + 1 -- list-addr value list-length - 1 current-cell )
    LDZ SWP STZ
    SWP ,&loop JMP
    &end 
    POP2
    SWP DUP LDZ #01 SUB SWP STZ
RET

( load game save (stub for now) )
@load-game 
    ( we load when the game was first started to store a timestamp on 16 bit from then )
    ( .DateTime/day DEI )
    #0d .epoch/day STZ
    ( .DateTime/hour DEI )
    #0c .epoch/hour STZ
    ( .DateTime/minute DEI )
    #00 .epoch/min STZ
    ( init events list )
    #0c .events ;list-create CALL
    ( init entities list )
    #0c .entities ;list-create CALL

    ( init tama )
    ;tama-init CALL
    ( we set main scene as first scene )
    ;main-scene-init CALL
RET

( check for pending events )
@check-for-events
    ( -- list-length )
    .events LDZ #0f AND
    &loop 
        DUP #00 EQU ;check-for-events/end JCN2
        ( list-length -- list-length curr )
        DUP .events ADD #03 SUB
        ( list-length cur -- list-length cur [cur] )
        DUP LDZ2
        TIME GTH2 ,&continue JCN
        ( list-length cur -- list-length cur cur+2 )
        DUP #02 ADD
        ( list-length cur cur+2 -- list-length cur )
        LDZ2 CALL
        ( list-length cur -- list-length index )
        .events #01 ADD SUB
        DUP #03 ADD .events ;list-delete CALL
        DUP #02 ADD .events ;list-delete CALL
        DUP #01 ADD .events ;list-delete CALL
        DUP .events ;list-delete CALL
        ( list-length index -- )
        &continue
        ( list-length cur -- list-length-4 )
        POP
        #04 SUB
        ;check-for-events/loop JMP2
    &end 
    ( list-length -- )
    POP
RET 

( manage entities system and callbacks )
@entities-update
    ( -- index )
    .entities LDZ #0f AND
    &loop 
        ( index -- index )
        DUP #00 EQU ,&end JCN
        ( index -- index entity-id index )
        DUP #04 SUB #04 DIV SWP DUP ROT ROT
        ( index entity-id index -- index entity-id callback )
        #03 SUB .entities ADD
        ( index entity-id callback -- index entity-id [callback]* )
        LDZ2
        CALL
        ( index -- index-4 )
        #04 SUB
        ,&loop JMP 
    &end  
    ( index -- )
    POP
RET 

( CONTROLLER Methods )
@on-controller 
    ( -- b )
    .Controller/button DEI
    DUP #40 AND ?on-controller-left
    DUP #80 AND ?on-controller-right
    DUP #01 AND ?on-controller-a
    POP
BRK

@on-controller-a 
    POP
    .scene/input-a LDZ2 CALL
BRK

@on-controller-left
    POP
    .scene/input-left LDZ2 CALL
BRK 

@on-controller-right 
    POP
    .scene/input-right LDZ2 CALL
BRK

( SCREEN Methods )
( Run each frames )
@on-screen
    .scene/update LDZ2 CALL
BRK

( Clean & 16x16 sprite on screen )
( x y -- x y )
@sprite-clean 
    .Screen/y DEO2k POP SWP2 .Screen/x DEO2k POP SWP2
    ;clean .Screen/addr DEO2
    #02 .Screen/sprite DEO
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
    #02 .Screen/sprite DEO
    .Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
    #02 .Screen/sprite DEO
    #0008 .Screen/x DEI2 SUB2 .Screen/x DEO2
    #02 .Screen/sprite DEO
RET

( Draw a 16x16 sprite on screen )
( sprite-setting sprite-addr x y -- )
@sprite-draw 
    DRAW_TILE
    #0008 .Screen/x DEI2 ADD2 .Screen/x DEO2
    #0008 .Screen/addr DEI2 ADD2 .Screen/addr DEO2
    DUP .Screen/sprite DEO
    #0010 .Screen/addr DEI2 ADD2 .Screen/addr DEO2
    #0008 .Screen/y DEI2 ADD2 .Screen/y DEO2
    DUP .Screen/sprite DEO
    .Screen/x DEI2 #0008 SUB2 .Screen/x DEO2
    .Screen/addr DEI2 #0008 SUB2 .Screen/addr DEO2
    .Screen/sprite DEO
RET

( draw a vertical line with y1 <= y2, y2 excluded )
( pixel-setting y1* y2* x*  -- )
@screen-y-line 
    .Screen/x DEO2
    SWP2 
    &loop
        ( pixel-setting y2* y1* -- pixel-setting  y2* )
        .Screen/y DEO2
        ( pixel-setting y2* -- y2* pixel-setting )
        ROT DUP
        .Screen/pixel DEO
        ( y2* pixel-setting -- pixel-setting y2* y2* )
        ROT ROT DUP2
        ( pixel-setting y2* -- pixel-setting y2* y2* y1*+1 y1*+1 )
        .Screen/y DEI2 INC2 DUP2
        ( pixel-setting y2* -- pixel-setting y2* y1*+1 y1*+1 y2* )
        ROT2
        ( pixel-setting y2* y1*+1 y1*+1 y2* -- pixel-setting y2* y1*+1 )
        LTH2 ,&loop JCN 
    POP2 POP2 POP    
RET 

( Fill the screen with the specified color )
( pixel-setting --  )
@screen-fill 
    &init 
        #0000 .Screen/x DEO2
        #0000 .Screen/y DEO2 
    &do 
        DUP .Screen/pixel DEO
        .Screen/x DEI2 
        INC2 DUP2 .Screen/x DEO2
        ( jump to screen-fill/do if [Screen/x] < [Screen/width] )
        .Screen/width DEI2 LTH2 
        ,&do JCN
        ( else )
        #0000 .Screen/x DEO2
        .Screen/y DEI2
        INC2 DUP2 .Screen/y DEO2
        ( jump to screen-fill/do if [Screen/y] < [Screen/height] )
        .Screen/height DEI2 LTH2
        ,&do JCN
        ( else )
    POP
RET 

( SCENE methods )

( -------------------------------- )
( Main scene )

%main-UI-Y { #0036 }

@main-ui-slots 
    &food 000f =tama-feed
    &sleep 001c =tama-sleep
    &wash &end 0028 =tama-wash

@main-scene-init
    ;main-scene-update .scene/update STZ2 
   ( make screen white )
    #00 ;screen-fill CALL
    ( reset tama )
    ;tama-reset-frame CALL POP2
 
    ;main-scene-select .scene/input-a STZ2
    ;main-scene-left .scene/input-left STZ2
    ;main-scene-right .scene/input-right STZ2

    ;main-ui-slots/food .cursor STZ2
    #03 ;food ;main-ui-slots/food LDA2 main-UI-Y DRAW_TILE POP
    #03 ;sleep ;main-ui-slots/sleep LDA2 main-UI-Y DRAW_TILE POP
    #03 ;wash ;main-ui-slots/wash LDA2 main-UI-Y DRAW_TILE POP
RET

@main-scene-update 
    ;tama-update CALL
    ;entities-update CALL
    ;main-scene-draw CALL
    ;check-for-events CALL
RET

@main-scene-left
    #00 ;main-scene-move JMP2
BRK

@main-scene-right
    #01 ;main-scene-move JMP2
BRK

@main-scene-select 
    .cursor LDZ2
    #0002 ADD2
    LDA2
    CALL
RET

( move ui cursor, 0 -> move left 1 -> move right )
( dir -- )
@main-scene-move 
    #00 ;main-scene-draw-cursor CALL
    ( clean last pos )
    .cursor LDZ2 
    ( move according dir in stack )
    ROT 
    #00 GTH ,&right JCN
    #0004 SUB2
    ,&end JMP
    &right
    #0004 ADD2
    &end 
    ( boundaries )
    DUP2 ;main-ui-slots/end LTH2 ,&check-left JCN
    POP2 ;main-ui-slots/end
    &check-left
    DUP2 ;main-ui-slots GTH2 ,&after-check JCN
    POP2 ;main-ui-slots
    &after-check
    .cursor STZ2
RET

@main-scene-draw-need 
    .Tama/hunger LDZ 
    #19 GTH ,&after-hunger JCN 
        ( if hunger <= 25 )
        #01 ;hungry #0020 #0008 ;sprite-draw CALL 
        RET
    &after-hunger 
    .Tama/strain LDZ 
    #19 GTH ,&after-strain JCN 
        #01 ;sleepy #0020 #0008 ;sprite-draw CALL 
        RET 
    &after-strain 
    .Tama/happy LDZ
    #19 GTH ,&after-happy JCN 
        #01 ;sad #0020 #0008 ;sprite-draw CALL
        RET
    &after-happy 
    #0018 #0018 ;sprite-clean CALL POP2 POP2
RET 

( pixel-setting -- )
@main-scene-draw-cursor 
    main-UI-Y #0008 ADD2 .Screen/y DEO2
    ( pixel-setting [cursor] )
    .cursor LDZ2 LDA2 #0003 ADD2 DUP2 .Screen/x DEO2
    ROT DUP .Screen/pixel DEO
    ROT ROT 
    INC .Screen/x DEO2
    .Screen/pixel DEO
RET 

( draw blinking cursor )
( pixel-settings -- )
@main-scene-draw 
    .frame-counter LDZ 
    INC
    DUP .frame-counter STZ 
    #0f AND #0f EQU ,&continue JCN 
    RET 
    &continue
    ;main-scene-draw-need CALL
    ;tama-draw CALL
    #03 ;main-scene-draw-cursor CALL
RET 

( --- )
( Sleep Scene )
@sleep-scene-init 
    ;sleep-scene-input-a .scene/input-a STZ2
    ;sleep-scene-input-left .scene/input-left STZ2
    ;sleep-scene-input-right .scene/input-right STZ2
    ;sleep-scene-update .scene/update STZ2
    ( make screen black )
    #01 ;screen-fill CALL
    ( start sleeping animation )
    ;zz/animation .Tama/frame STZ2
    ( set wake up timer )
    TIME #0001 ADD2
    SWP 
    .events ;list-push CALL
    .events ;list-push CALL
    
    ;main-scene-init 
    SWP 
    .events ;list-push CALL
    .events ;list-push CALL
RET 

@sleep-scene-update 
    ;sleep-scene-draw CALL
    ;check-for-events CALL
RET 

@sleep-scene-input-a 
RET 

@sleep-scene-input-left 
RET 

@sleep-scene-input-right 
RET 

@sleep-scene-draw 
    .frame-counter LDZ 
    INC
    DUP .frame-counter STZ 
    #0f AND #0f EQU ,&continue JCN 
    RET 
    &continue

    ( last animation value is always 00, so if it's 00, we reset )
    .Tama/frame LDZ2 #0003 ADD2 
    DUP2 .Tama/frame STZ2
    ( [Tama/frame] -- [Tama/frame] )
    LDAk ,&skip-reset JCN
        POP2
        ;zz/animation DUP2 .Tama/frame STZ2
    &skip-reset
    LDAk ROT ROT INC2 LDA2
    .Tama/x LDZ2 #0008 ADD2
    .Tama/y LDZ2 #0008 SUB2
    DRAW_TILE POP
RET

( ----------------- )
( EATING scene )
@eating-scene-init 
    ;eating-scene-update .scene/update STZ2
    ;eating-scene-input-a .scene/input-a STZ2
    ;eating-scene-input-right .scene/input-right STZ2
    ;eating-scene-input-left .scene/input-left STZ2
    #00 ;screen-fill CALL 

    ;pig-eating/animation .Tama/frame STZ2
RET 

@eating-scene-update 
    .frame-counter LDZ 
    INC
    DUP .frame-counter STZ 
    #0f AND #0f EQU ,&continue JCN 
    RET 
    &continue
    .Tama/frame LDZ2 
    ;pig-bounce/animation EQU2 ,&quit JCN
        ;tama-draw CALL
        RET
    &quit
    ;main-scene-init CALL
    #64 #19 .Tama/hunger LDZ ;add-max CALL 
    .Tama/hunger STZ
RET 

@eating-scene-input-a
RET 

@eating-scene-input-right
RET 

@eating-scene-input-left
RET

( ----------------- )
( CLEAN scene )
@clean-scene-init 
    ;clean-scene-update .scene/update STZ2
    ;clean-scene-input-a .scene/input-a STZ2
    ;clean-scene-input-right .scene/input-right STZ2
    ;clean-scene-input-left .scene/input-left STZ2

    #00 ;screen-fill CALL 

    #00 .cursor STZ
    #01 #0000 .Screen/height DEI2 #0000 ;screen-y-line CALL
RET

@clean-scene-update
    #00 #0000 .Screen/height DEI2 #00 .cursor LDZ ;screen-y-line CALL 
    .cursor LDZ INC .cursor STZ
    #01 #0000 .Screen/height DEI2 #00 .cursor LDZ ;screen-y-line CALL 

    #00 .cursor LDZ .Screen/width DEI2 GTH2 ,&quit JCN
    RET
    &quit
    ;main-scene-init CALL
RET

@clean-scene-input-a
RET 

@clean-scene-input-right
RET 

@clean-scene-input-left
RET

( ------------------------------ )
( POOP methods )

@poop-frame $2

( store a new poop with callback* animation-frame* x y )
@poop-init 
    ( get one byte only )
    ( -- x )
    &before-loop
    ;prng CALL POP #39 AND
    ( x -- x index )
    .entities LDZ #0f AND 
    &loop
        DUP #00 EQU ,&after-loop JCN
        ( x index -- x index index-1 )
        DUP .entities ADD #01 SUB 
        ( x index index-1 -- x index xe )
        LDZ
        ( x index xe -- index xe x )
        ROT
        ( index xe x -- index xe x xe x )
        DUP2 
        #08 ADD GTH ,&after-check JCN
        ( index xe x -- index xe x x xe )
        DUP2 SWP
        #08 ADD GTH ,&after-check JCN
            POP2 POP
            ,&before-loop JMP
        &after-check ( x+8 < xe || x > xe+8 )
        ( index xe x -- x index )
        SWP POP SWP
        #04 SUB
        ,&loop JMP 
    &after-loop
    POP

    ( x -- x y )
    #28

    ;poop-update 
    SWP 
    .entities ;list-push CALL
    .entities ;list-push CALL
    SWP
    ( y x -- y )
    .entities ;list-push CALL 
    ( y -- )
    .entities ;list-push CALL 
    ;zz/animation ;poop-frame STA2
RET 

( remove a poop from entities list )
( index -- )
@poop-delete 
    #04 MUL #03 ADD
    DUP .entities ;list-delete CALL
    #01 SUB DUP .entities ;list-delete CALL
    #01 SUB DUP .entities ;list-delete CALL
    #01 SUB .entities ;list-delete CALL
RET 

( updates a poop )
( index --  )
@poop-update
    .frame-counter LDZ
    #0f AND #0f EQU ,&draw JCN
        ( index -- )
        POP
        RET
    &draw
    ( index -- )
    ;poop-draw CALL
RET

( daws a poop )
( index -- )
@poop-draw 
    ( last animation value is always 00, so if it's 00, we reset )
    #04 MUL .entities ADD #01 ADD
    ( index-callback -- index-callback frame* )
    ;poop-frame LDA2 #0003 ADD2
    ( index-callback frame* -- index-callback frame* )
    DUP2 ;poop-frame STA2
    ( index-callback frame* -- index-callback frame* )
    LDAk ,&skip-reset JCN
        POP2
        ;zz/animation DUP2 ;poop-frame STA2
    &skip-reset
    ( index-callback frame* -- frame* )
    ( -- index-callback )
    ROT STH
    ( frame* -- [frame*] frame* )
    ( index-callback -- index-callback )
    DUP2 LDA ROT ROT
    ( [frame*] frame* -- [frame*] [frame*+1]* index-callback )
    ( index-callback --  )
    INC2 LDA2 STHr #02 ADD
    ( [frame*] [frame*+1]* index-callback -- [frame*] [frame*+1]* [index-callback+2] [index-callback+3] )
    LDZk #00 SWP ROT INC LDZ #00 SWP
    DRAW_TILE POP
RET 

( TAMA methods )
( init the tamagotchi )
@tama-init 
    ;egg/animation .Tama/frame STZ2
    #0018 .Tama/x STZ2
    #0018 .Tama/y STZ2
    TAMA_EGG .Tama/state STZ

    ( set stats at 100 )
    #64 .Tama/happy STZ
    #64 .Tama/hunger STZ
    #64 .Tama/strain STZ
    #64 .Tama/poop STZ

    ( first update run happens 2min after startup )
    ( TODO: #0002 instead of #0000 )
    TIME #0000 ADD2
    SWP 
    ( store high byte )
    .events ;list-push CALL
    ( store low byte )
    .events ;list-push CALL
    ;tama-update-stats 
    SWP 
    ( store high byte )
    .events ;list-push CALL
    ( store low byte )
    .events ;list-push CALL
RET

( Update a stat at given adress, by decreasing by given amount. Caped at #00 and return #01 if caped )
( amount stat-addr -- caped )
@tama-update-stat 
    ( amount stat-addr -- amount stat-addr stat-value )
    DUP LDZ 
    ( amount stat-addr stat-value -- stat-addr stat-value-amount carry )
    ROT SUBC
    ,&caped JCN
        SWP STZ 
        #00 
    RET
    &caped 
        POP 
        #00
        SWP
        STZ 
        #01
RET 

( update poop counter and make poop spawn )
( amount -- )
@tama-update-poop 
    ( amount -- poop-amount carry )
    .Tama/poop LDZ SWP SUBC 
    ,&do JCN
        ( if poop >= 0 )
        ( poop-amount -- )
        .Tama/poop STZ
        RET
    &do
        ( if poop < 0 )
        ( poop-amount -- )
        POP
        ;poop-init CALL
        #64 .Tama/poop STZ
RET

( Update happinness given context )
( Tama will loose 2% happiness each min for each poop on party )
@tama-update-happy
    #00 
    .entities LDZ #0f AND 
    &loop 
        ( poop-counter index -- poop-counter index )
        DUP #00 EQU ,&after-loop JCN 
        ( poop-counter index -- poop-counter index [callback]* )
        DUP .entities ADD #03 SUB LDZ2
        ;poop-update EQU2
        ,&inc-counter JCN 
            ( if callback != poop-update )
            ( poop-counter index -- poop-counter index )
            ,&after-check JMP 
        &inc-counter 
            ( if callback == poop-update )
            SWP INC SWP 
        &after-check
            ( poop-counter index -- poop-counter index-4 )
            #04 SUB 
            ,&loop JMP 
    &after-loop 
    ( poop-counter index -- poop-counter poop-counter )
    POP DUP 
    &loop-poop 
        ( poop-counter poop-counter -- poop-counter poop-counter )
        DUP #00 EQU ,&after-loop-poop JCN 
        ( poop-counter poop-counter -- poop-counter poop-counter 2%happy+1 )
        #0064 #0002 #00 .Tama/happy LDZ MUL2 SWP2 DIV2 NIP #01 ADD
        .Tama/happy LDZ SWP SUBC
        ,&dead JCN 
            ( if 2%happy >= 0 )
            ( poop-counter poop-counter happy -- poop-counter )
            .Tama/happy STZ 
            ( poop-counter poop-counter -- poop-counter-1 )
            #01 SUB 
            ,&loop-poop JMP 
    &after-loop-poop
    POP
    ( poop-amount -- no-poop )
    #00 EQU 
    ( no-poop -- no-poop hungry>50 )
    .Tama/hunger LDZ #32 GTH 
    ( no-poop hungry>50 -- no-poop hungry>50 strain>50 )
    .Tama/strain LDZ #32 GTH 
    ( no-poop hungry>50 strain>50 -- increase-happy )
    AND AND 
    ,&increase-happy JCN 
        ( if not increase-happy )
        #00 
        RET
    &increase-happy 
        ( if increase happy )
        .Tama/happy LDZ #01 ADD
        DUP #64 LTH ,&done JCN 
            POP #64
        &done 
        .Tama/happy STZ
        #00 
        RET 
    &dead 
        ( if happy <= 0 )
        ( poop-counter poop-counter happy -- dead )
        POP2 POP
        #00 .Tama/happy STZ
        #01
RET 

( Update tama stats when egg )
@tama-update-stats-egg
    TAMA_BABY .Tama/state STZ

    ( when hatching, hunger is set to 25 )
    #19 .Tama/hunger STZ
RET 

( Update tama stats when baby )
@tama-update-stats-baby 
    ( we loose 3 hunger each min, to it's 30 in ten minutes )
    ( -- hunger<0 )
    #03 .Tama/hunger ;tama-update-stat CALL
    ( hunger<0 -- hunger<0 strain<0 )
    #0a .Tama/strain ;tama-update-stat CALL
    ( hunger<0 strain<0 -- unhealthy )
    ORA
    ( we loose 5 poop each min )
    #05 ;tama-update-poop CALL
    ,&unhealthy JCN
        ( if hunger >= 0 or strain >= 0 )
        RET 
    &unhealthy 
        ( if hunger < 0 or strain <0 )
        ( -- happy<0 )
        #05 .Tama/happy ;tama-update-stat CALL
        ,&dead JCN 
            ( if happy >= 0 )
            RET 
    &dead 
        ;tama-update-stats-dead CALL
RET

@tama-update-stats-dead 
    LIT2 "xx .Console/write DEO .Console/write DEO
    ( update tama state )
    TAMA_DEAD .Tama/state STZ
    ( we cancel every events )
    #c0 .events STZ
RET

( Update tama stats, run each minute )
@tama-update-stats 
    ( first update run happens 2min after startup )
    ( manage age, at first run we are an egg, when this is called, it's time to hatch )
    .Tama/state LDZ
    DUP TAMA_EGG EQU ,&update-egg JCN
    DUP TAMA_BABY EQU ,&update-baby JCN
    DUP TAMA_DEAD EQU ,&update-dead JCN

    ,&after-switch JMP
    &update-egg 
        ;tama-update-stats-egg CALL
        ,&after-switch JMP
    &update-baby 
        ;tama-update-stats-baby CALL 
        ,&after-switch JMP 
    &update-dead 
        ;tama-update-stats-dead CALL 
        ,&after-switch JMP 
    &after-switch
    POP

    ( -- dead )
    ;tama-update-happy CALL 
    ,&dead JCN 
        ( if not dead )
        ,&after-dead JMP 
    &dead 
        ( if dead )
        ;tama-update-stats-dead CALL
    &after-dead

    ;print-stats CALL

    ( reschedule in 1 min )
    TIME #0001 ADD2
    SWP 
    ( store high byte )
    .events ;list-push CALL
    ( store low byte )
    .events ;list-push CALL

    ;tama-update-stats 
    SWP 
    ( store high byte )
    .events ;list-push CALL
    ( store low byte )
    .events ;list-push CALL
RET


( update tamagotchi state )
@tama-update 
RET

( make tama eat )
@tama-feed
    ;eating-scene-init CALL
RET 

( make tama sleep )
@tama-sleep
    ;sleep-scene-init CALL
RET

( make tama clean )
@tama-wash 
    ;clean-scene-init CALL
RET 

( reset frame according to tama state )
( -- Tama/frame )
@tama-reset-frame 
    .Tama/state LDZ
    DUP TAMA_EGG EQU ,&egg JCN
    DUP TAMA_BABY EQU ,&baby JCN
    ,&end JMP
    &egg
        ;egg/animation 
        ,&end JMP
    &baby
        ;pig-bounce/animation
        ,&end JMP
    &end 
    DUP2 .Tama/frame STZ2
    ROT
    POP
RET

( draw the tamagotchi and updates its animation )
@tama-draw 
    ( last animation value is always 00, so if it's 00, we reset )
    .Tama/frame LDZ2 #0003 ADD2 
    DUP2 .Tama/frame STZ2
    ( [Tama/frame] -- [Tama/frame] )
    LDAk ,&skip-reset JCN
        POP2
        ;tama-reset-frame CALL
    &skip-reset
    LDAk ROT ROT INC2 LDA2
    .Tama/x LDZ2 
    .Tama/y LDZ2
    ;sprite-draw CALL
RET

( RES )

@clean
    00 00 00 00 00 00 00 00

@food 
    00 28 14 7e 42 3c 00 00

@wash
    00 02 04 18 28 58 70 00

@sleep
    00 06 02 64 26 40 60 00

@zz
    &animation 
    04 =sleep 04 =sleep 04 =sleep 04 =zz/frame-1 04 =zz/frame-1 04 =zz/frame-1 00
    &frame-1
    06 02 04 76 10 20 40 70

@pig-bounce
    &animation 
    01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-2 00
    &frame-1
    00 03 04 1d 20 40 40 40 
    00 60 90 b0 08 a8 04 7c
    40 40 40 80 40 37 3f 00
    82 aa 82 7c 04 68 f8 00
    &frame-2
    00 00 03 04 1d 20 40 40
    00 00 60 90 b0 08 a8 04
    40 40 40 40 80 40 7f 00
    7c 82 aa 82 7c 04 fc 00

@pig-close
    &animation 
    01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-close/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-close/frame-1 00
    &frame-1
    00 03 04 1d 20 40 40 40
    00 60 90 b0 08 08 04 7c
    40 40 40 80 40 37 3f 00
    82 aa 82 7c 04 68 f8 00

@pig-eating
    &animation 
    01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 00
    &frame-1
    00 03 04 1d 20 40 40 40 
    00 60 90 b0 08 a8 04 7c
    40 40 41 81 40 37 3f 00
    82 aa 82 fc f0 08 f8 00

@egg
    &animation
    01 =egg/frame-1 01 =egg/frame-2 01 =egg/frame-1 01 =egg/frame-3 00
    &frame-1
    00 00 03 04 04 08 08 10
    00 00 c0 20 60 f0 70 08
    13 17 0f 0f 07 00 00 00
    08 88 90 10 e0 00 00 00
    &frame-2
    00 00 03 04 04 08 08 08
    00 00 c0 20 60 f0 70 08
    09 0b 07 07 03 00 00 00
    84 c4 c8 88 f0 00 00 00
    &frame-3
    00 00 01 02 02 06 04 08
    00 00 e0 30 70 f8 78 08
    13 17 0f 0f 07 00 00 00
    08 88 90 90 e0 00 00 00

@hungry 
    00 00 0f 10 22 21 20 23
    00 00 f8 04 82 42 02 e2
    22 21 10 0f 00 04 0a 04
    22 c2 04 f8 00 00 00 00

@sleepy 
    00 00 0f 10 20 20 23 21
    00 00 f8 04 62 22 42 62
    22 23 10 0f 00 04 0a 04
    02 02 04 f8 00 00 00 00

@sad 
    00 00 0f 10 23 27 27 23
    00 00 f8 04 62 f2 f2 e2
    21 20 10 0f 00 04 0a 04
    c2 82 04 f8 00 00 00 00