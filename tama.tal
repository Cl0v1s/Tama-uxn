( Stats: https://www.tamatalk.com/threads/tama-behaviour-schedule-v5.181751/ )
( Chr: http://make.vg/brewtool/chr/index.html )
( Base64 to hex: https://cryptii.com/pipes/base64-to-hex )
( ressource pack: https://piiixl.itch.io/1-bit-in-motion )

|00 @System  [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1
|20 @Screen  [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2 &addr $2 &pixel $1 &sprite $1 ]
|80 @Controller [ &vector $2 &button $1 &key $1 ]
|c0 @DateTime &year $2 &month $1 &day $1 &hour $1 &minute $1 &second $1 &dotw $1 &doty $2 &isdst $1

( MACROS )

( sub-routine-address -- )
%CALL {
    JSR2
}

( -- )
( return-address -- (rst) )
%RET {
    JMP2r
}

( sub with carry )
( a b -- a-b c )
%SUBC {
    SWP DUP ROT SUB
    SWP GTHk SWP POP
}

( sub2 with carry )
( a b -- a-b c )
%SUBC2 {
    SWP2 DUP2 ROT2 SUB2
    SWP2 GTHk2 SWP2 POP2
}

%TIME {
    #00 .DateTime/minute DEI .epoch/min LDZ SUBC
    #00 SWP .DateTime/hour DEI .epoch/hour LDZ ROT ADD SUBC
    #00 SWP .DateTime/day DEI .epoch/day LDZ ROT ADD SUB
    #05a0 MUL2 SWP2 #003c MUL2 ADD2 ADD2 
}

( sprite-setting sprite-addr x y -- sprite-setting )
%DRAW_TILE {
    .Screen/y DEO2
    .Screen/x DEO2
    .Screen/addr DEO2
    .Screen/sprite DEOk 
    POP
}

%TAMA_EGG { #00 }
%TAMA_BABY { #01 }

( Structs )

|0000
    @frame-counter $1
    ( contains the adress of the currently selected UI slot )
    @cursor $2
    ( contains address of the currently played scene )
    @scene 
        &update $2
        &input-a $2
        &input-left $2
        &input-right $2
    ( dd hh mm, we only keep low nibble for year )
    @epoch 
        &day $1
        &hour $1
        &min $1
    @Events $6
    @Tama 
        &frame $2
        &x $2
        &y $2
        &state $1
        &happy $1
        &hunger $1
        &strain $1
        &poop $1

|0100
    #0040 .Screen/width DEO2
    #0040 .Screen/height DEO2

    #31ef .System/r DEO2
    #72af .System/g DEO2
    #b57c .System/b DEO2

    ;load-game CALL

    ;on-screen .Screen/vector DEO2
    ;on-controller .Controller/vector DEO2
BRK


( Methods )

( MISC )

( load game save (stub for now) )
@load-game 
    ( we load when the game was first started to store a timestamp on 16 bit from then )
    ( .DateTime/day DEI )
    #0d .epoch/day STZ
    ( .DateTime/hour DEI )
    #0c .epoch/hour STZ
    ( .DateTime/minute DEI )
    #00 .epoch/min STZ
    ( we set main scene as first scene )
    ;main-scene .scene/update STZ2 

    ;main-scene-init CALL
RET

( CONTROLLER Methods )
@on-controller 
    ( -- b )
    .Controller/button DEI
    DUP #40 AND ?on-controller-left
    DUP #80 AND ?on-controller-right
    DUP #01 AND ?on-controller-a
    POP
BRK

@on-controller-a 
    POP
    .scene/input-a LDZ2 CALL
BRK

@on-controller-left
    POP
    .scene/input-left LDZ2 CALL
BRK 

@on-controller-right 
    POP
    .scene/input-right LDZ2 CALL
BRK

( SCREEN Methods )
( Run each frames )
@on-screen
    .frame-counter LDZk INC SWP STZk POP
    #0f AND
    #0f EQU
    ,&update JCN
    ,&end JMP
    &update 
        .scene/update LDZ2 CALL
    &end
BRK

( Clean & 16x16 sprite on screen )
( x y -- x y )
@sprite-clean 
    .Screen/y DEO2k POP SWP2 .Screen/x DEO2k POP SWP2
    ;clean .Screen/addr DEO2
    #02 .Screen/sprite DEO
    .Screen/x DEI2 #0008 ADD2 .Screen/x DEO2
    #02 .Screen/sprite DEO
    .Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
    #02 .Screen/sprite DEO
    #0008 .Screen/x DEI2 SUB2 .Screen/x DEO2
    #02 .Screen/sprite DEO
RET

( Draw a 16x16 sprite on screen )
( sprite-setting sprite-addr x y -- )
@sprite-draw 
    DRAW_TILE
    #0008 .Screen/x DEI2 ADD2 .Screen/x DEO2
    #0008 .Screen/addr DEI2 ADD2 .Screen/addr DEO2
    DUP .Screen/sprite DEO
    #0010 .Screen/addr DEI2 ADD2 .Screen/addr DEO2
    #0008 .Screen/y DEI2 ADD2 .Screen/y DEO2
    DUP .Screen/sprite DEO
    .Screen/x DEI2 #0008 SUB2 .Screen/x DEO2
    .Screen/addr DEI2 #0008 SUB2 .Screen/addr DEO2
    .Screen/sprite DEO
RET

( Fill the screen with the specified color )
( pixel-setting --  )
@screen-fill 
    &init 
        #0000 .Screen/x DEO2
        #0000 .Screen/y DEO2 
    &do 
        DUP .Screen/pixel DEO
        .Screen/x DEI2 
        INC2 DUP2 .Screen/x DEO2
        ( jump to screen-fill/do if [Screen/x] < [Screen/width] )
        .Screen/width DEI2 LTH2 
        ,&do JCN
        ( else )
        #0000 .Screen/x DEO2
        .Screen/y DEI2
        INC2 DUP2 .Screen/y DEO2
        ( jump to screen-fill/do if [Screen/y] < [Screen/height] )
        .Screen/height DEI2 LTH2
        ,&do JCN
        ( else )
    POP
RET 

( SCENE methods )

( -------------------------------- )
( Main scene )

%main-UI-Y { #0036 }

( available UI Menu slots )
@main-ui-slots 
    &food 000f =tama-feed
    &sleep 001c =tama-sleep
    &wash &end 0028 =tama-wash

@main-scene-init
    ;main-ui-init CALL
    ;tama-init CALL
RET

@main-scene 
    ;tama-update CALL
    ;main-ui-update CALL
RET

( init the UI )
@main-ui-init 
    ;main-ui-select .scene/input-a STZ2
    ;main-ui-left .scene/input-left STZ2
    ;main-ui-right .scene/input-right STZ2

    ;main-ui-slots/food .cursor STZ2
    #03 ;food ;main-ui-slots/food LDA2 main-UI-Y DRAW_TILE POP
    #03 ;sleep ;main-ui-slots/sleep LDA2 main-UI-Y DRAW_TILE POP
    #03 ;wash ;main-ui-slots/wash LDA2 main-UI-Y DRAW_TILE POP
RET 

@main-ui-update 
    .frame-counter LDZ
    #3f AND #3f EQU ,&draw JCN
        #03 
        ,&end JMP
    &draw
        #00
    &end
    ;main-ui-draw CALL
RET 

@main-ui-left
    #00 ;main-ui-move JMP2
BRK

@main-ui-right
    #01 ;main-ui-move JMP2
BRK

( move ui cursor, 0 -> move left 1 -> move right )
( dir -- )
@main-ui-move 
    ( clean last pos )
    #00 ;main-ui-draw CALL
    .cursor LDZ2
    ( move according dir in stack )
    ROT 
    #00 GTH ,&right JCN
    #0004 SUB2
    ,&end JMP
    &right
    #0004 ADD2
    &end 
    ( boundaries )
    DUP2 ;main-ui-slots/end LTH2 ,&check-left JCN
    POP2 ;main-ui-slots/end
    &check-left
    DUP2 ;main-ui-slots GTH2 ,&after-check JCN
    POP2 ;main-ui-slots
    &after-check
    .cursor STZ2
RET

( activate currently selected option )
@main-ui-select 
    .cursor LDZ2
    #0002 ADD2
    LDA2
    CALL
RET

( draw blinking cursor )
( pixel-settings -- )
@main-ui-draw 
    main-UI-Y #0008 ADD2 .Screen/y DEO2
    .cursor LDZ2 LDA2 #0003 ADD2 DUP2 .Screen/x DEO2
    ROT DUP
    .Screen/pixel DEO
    ROT ROT
    INC .Screen/x DEO2
    .Screen/pixel DEO
RET 

( --- )
( Sleep Scene )
@sleep-scene-init 
    ;sleep-scene-input-a .scene/input-a STZ2
    ;sleep-scene-input-left .scene/input-left STZ2
    ;sleep-scene-input-right .scene/input-right STZ2
    ;sleep-scene-update .scene/update STZ2

    #01 ;screen-fill CALL
RET 

@sleep-scene-update 

RET 

@sleep-scene-input-a 

RET 

@sleep-scene-input-left 

RET 

@sleep-scene-input-right 

RET 

@sleep-scene-draw 

RET


( ------------------------------ )
( TAMA methods )
( init the tamagotchi )
@tama-init 
    ;egg/animation .Tama/frame STZ2
    #0018 .Tama/x STZ2
    #0018 .Tama/y STZ2
    TAMA_EGG .Tama/state STZ

    TIME #0001 ADD2 .Events STZ2 
    ;tama-hatch-egg .Events #02 ADD STZ2 
RET

@tama-check-for-events
( check for pending events )
    .Events LDZ2
    #0000 EQU2 ,&after-events JCN
    .Events LDZ2
    TIME GTH2 ,&after-events JCN
    .Events #02 ADD LDZ2 CALL
    #0000 .Events STZ2
    &after-events
RET

( update tamagotchi state when egg )
@tama-update-when-egg 

( update tamagotchi state )
@tama-update 
    ;tama-check-for-events CALL

    &after-state
    .Tama/x LDZ2 .Tama/y LDZ2
    ;sprite-clean CALL
    POP2 POP2
    ;tama-draw CALL
RET

( hatch egg )
@tama-hatch-egg
    TAMA_BABY .Tama/state STZ
RET

( make tama eat )
@tama-feed
    ;pig-eating/animation .Tama/frame STZ2
RET 

( make tama sleep )
@tama-sleep
    ;sleep-scene-init CALL
RET

( make tama clean )
@tama-wash 
    #34 .Console/write DEO
RET 

( reset frame according to tama state )
( -- Tama/frame )
@tama-reset-frame 
    .Tama/state LDZ
    DUP TAMA_EGG EQU ,&egg JCN
    DUP TAMA_BABY EQU ,&baby JCN
    ,&end JMP
    &egg
        ;egg/animation 
        ,&end JMP
    &baby
        ;pig-bounce/animation
        ,&end JMP
    &end 
    DUP2 .Tama/frame STZ2
    ROT
    POP
RET

( draw the tamagotchi and updates its animation )
@tama-draw 
    ( last animation value is always 00, so if it's 00, we reset )
    .Tama/frame LDZ2 #0003 ADD2 
    DUP2 .Tama/frame STZ2
    ( [Tama/frame] -- [Tama/frame] )
    LDAk ,&skip-reset JCN
        POP2
        ;tama-reset-frame CALL
    &skip-reset
    LDAk ROT ROT INC2 LDA2
    .Tama/x LDZ2 
    .Tama/y LDZ2
    ;sprite-draw CALL
RET

( RES )

@clean
    00 00 00 00 00 00 00 00

@food 
    00 28 14 7e 42 3c 00 00

@wash
    00 02 04 18 28 58 70 00

@sleep
    00 06 02 64 26 40 60 00

@pig-bounce
    &animation 
    01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-2 00
    &frame-1
    00 03 04 1d 20 40 40 40 
    00 60 90 b0 08 a8 04 7c
    40 40 40 80 40 37 3f 00
    82 aa 82 7c 04 68 f8 00
    &frame-2
    00 00 03 04 1d 20 40 40
    00 00 60 90 b0 08 a8 04
    40 40 40 40 80 40 7f 00
    7c 82 aa 82 7c 04 fc 00

@pig-close
    &animation 
    01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-close/frame-1 01 =pig-bounce/frame-1 01 =pig-bounce/frame-1 01 =pig-close/frame-1 00
    &frame-1
    00 03 04 1d 20 40 40 40
    00 60 90 b0 08 08 04 7c
    40 40 40 80 40 37 3f 00
    82 aa 82 7c 04 68 f8 00

@pig-eating
    &animation 
    01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 01 =pig-eating/frame-1 01 =pig-bounce/frame-1 00
    &frame-1
    00 03 04 1d 20 40 40 40 
    00 60 90 b0 08 a8 04 7c
    40 40 41 81 40 37 3f 00
    82 aa 82 fc f0 08 f8 00

@egg
    &animation
    01 =egg/frame-1 01 =egg/frame-2 01 =egg/frame-1 01 =egg/frame-3 00
    &frame-1
    00 00 03 04 04 08 08 10
    00 00 c0 20 60 f0 70 08
    13 17 0f 0f 07 00 00 00
    08 88 90 10 e0 00 00 00
    &frame-2
    00 00 03 04 04 08 08 08
    00 00 c0 20 60 f0 70 08
    09 0b 07 07 03 00 00 00
    84 c4 c8 88 f0 00 00 00
    &frame-3
    00 00 01 02 02 06 04 08
    00 00 e0 30 70 f8 78 08
    13 17 0f 0f 07 00 00 00
    08 88 90 90 e0 00 00 00





